// <auto-generated />
using System;
using Client.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Client.Migrations
{
    [DbContext(typeof(DB))]
    partial class DBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Client.Data.Model.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("UserId");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("Client.Data.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Client.Data.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Client.Data.Model.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("Client.Data.Model.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CostPerUnit")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("Client.Data.Model.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseType");
                });

            modelBuilder.Entity("Client.Data.Model.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EditDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Client.Data.Model.Participant", b =>
                {
                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TrainingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("Client.Data.Model.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EarlyCheckInDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("HotelPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LateCheckOutDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("UserDocumentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UserDocumentId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Client.Data.Model.RequestHotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestHotel");
                });

            modelBuilder.Entity("Client.Data.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Client.Data.Model.Skill", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("InternationalExpertId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.HasIndex("InternationalExpertId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Importance")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ParentSubSkillId")
                        .HasColumnType("int");

                    b.Property<string>("Theory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WSOSId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSubSkillId");

                    b.HasIndex("WSOSId");

                    b.ToTable("SubSkill");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillCriterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxMark")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SubSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubSkillId");

                    b.ToTable("SubSkillCriterion");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<byte>("Mark")
                        .HasColumnType("tinyint");

                    b.Property<int>("SubSkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("SubSkillId");

                    b.ToTable("SubSkillMark");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("MaxScore")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubSkilId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("SubSkilId");

                    b.ToTable("SubSkillTask");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillTaskResolving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointingUserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndCheckingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndReadingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndSolvingTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFullResolving")
                        .HasColumnType("bit");

                    b.Property<byte?>("Score")
                        .HasColumnType("tinyint");

                    b.Property<string>("SolutionPath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartCheckingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartReadingTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartSolvingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubSkillTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointingUserId");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("SubSkillTaskId");

                    b.ToTable("SubSkillTaskResolving");
                });

            modelBuilder.Entity("Client.Data.Model.TestProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TestProject");
                });

            modelBuilder.Entity("Client.Data.Model.TestProjectSession", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("FileStorage")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TestProjectId")
                        .HasColumnType("int");

                    b.HasIndex("TestProjectId");

                    b.ToTable("TestProjectSession");
                });

            modelBuilder.Entity("Client.Data.Model.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArrivalCityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDateTim")
                        .HasColumnType("datetime");

                    b.Property<string>("BaggageInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartureCityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartureDateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ExpensiveId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<bool>("IsToTraining")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalCityId");

                    b.HasIndex("DepartureCityId");

                    b.HasIndex("ExpensiveId");

                    b.HasIndex("RequestId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Client.Data.Model.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("SkillCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TrainingPlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillCode");

                    b.HasIndex("TrainingPlaceId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Client.Data.Model.TrainingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingDay");
                });

            modelBuilder.Entity("Client.Data.Model.TrainingPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TrainingPlace");
                });

            modelBuilder.Entity("Client.Data.Model.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UnitType");
                });

            modelBuilder.Entity("Client.Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullNameEN")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullNameRU")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsStaff")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Client.Data.Model.UserDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ScanPath")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDocument");
                });

            modelBuilder.Entity("Client.Data.Model.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Client.Data.Model.UserToken", b =>
                {
                    b.Property<string>("Token")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("Client.Data.Model.UserTrainingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<int>("TrainingDayId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingDayId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTrainingDay");
                });

            modelBuilder.Entity("Client.Data.Model.WSOS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("SectionNumber")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SkillCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillCode");

                    b.ToTable("WSOS");
                });

            modelBuilder.Entity("Client.Data.Model.Catalog", b =>
                {
                    b.HasOne("Client.Data.Model.Catalog", "CatalogNavigation")
                        .WithMany("InverseCatalogNavigation")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_Catalog_Catalog");

                    b.HasOne("Client.Data.Model.User", "User")
                        .WithMany("Catalogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Catalog_User")
                        .IsRequired();

                    b.Navigation("CatalogNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Client.Data.Model.City", b =>
                {
                    b.HasOne("Client.Data.Model.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Client.Data.Model.Expense", b =>
                {
                    b.HasOne("Client.Data.Model.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .HasConstraintName("FK_Expense_ExpenseType")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.Training", "Training")
                        .WithMany("Expenses")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_Expense_Training")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.UnitType", "UnitType")
                        .WithMany("Expenses")
                        .HasForeignKey("UnitTypeId")
                        .HasConstraintName("FK_Expense_UnitType")
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("Training");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("Client.Data.Model.File", b =>
                {
                    b.HasOne("Client.Data.Model.Catalog", "Catalog")
                        .WithMany("Files")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_File_Catalog")
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("Client.Data.Model.Participant", b =>
                {
                    b.HasOne("Client.Data.Model.Training", "Training")
                        .WithMany("Participants")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_Participant_Training")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Participant_User")
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Client.Data.Model.Request", b =>
                {
                    b.HasOne("Client.Data.Model.User", "Owner")
                        .WithMany("Requests")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Request_User")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.Training", "Training")
                        .WithMany("Requests")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_Request_Training")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.UserDocument", "UserDocument")
                        .WithMany("Requests")
                        .HasForeignKey("UserDocumentId")
                        .HasConstraintName("FK_Request_UserDocument")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Training");

                    b.Navigation("UserDocument");
                });

            modelBuilder.Entity("Client.Data.Model.RequestHotel", b =>
                {
                    b.HasOne("Client.Data.Model.Request", "Request")
                        .WithMany("RequestHotels")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_RequestHotel_Request")
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Client.Data.Model.Skill", b =>
                {
                    b.HasOne("Client.Data.Model.User", "InternationalExpert")
                        .WithMany("Skills")
                        .HasForeignKey("InternationalExpertId")
                        .HasConstraintName("FK_Skill_User")
                        .IsRequired();

                    b.Navigation("InternationalExpert");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkill", b =>
                {
                    b.HasOne("Client.Data.Model.SubSkill", "ParentSubSkill")
                        .WithMany("InverseParentSubSkill")
                        .HasForeignKey("ParentSubSkillId")
                        .HasConstraintName("FK_SubSkill_SubSkill");

                    b.HasOne("Client.Data.Model.WSOS", "WSOS")
                        .WithMany("SubSkills")
                        .HasForeignKey("WSOSId")
                        .HasConstraintName("FK_SubSkill_WSOS");

                    b.Navigation("ParentSubSkill");

                    b.Navigation("WSOS");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillCriterion", b =>
                {
                    b.HasOne("Client.Data.Model.SubSkill", "SubSkill")
                        .WithMany("SubSkillCriteria")
                        .HasForeignKey("SubSkillId")
                        .HasConstraintName("FK_SubSkillCritetion_SubSkill")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("SubSkill");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillMark", b =>
                {
                    b.HasOne("Client.Data.Model.User", "Competitor")
                        .WithMany("SubSkillMarks")
                        .HasForeignKey("CompetitorId")
                        .HasConstraintName("FK_SubSkillMark_User")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.SubSkill", "SubSkill")
                        .WithMany("SubSkillMarks")
                        .HasForeignKey("SubSkillId")
                        .HasConstraintName("FK_SubSkillMark_SubSkill")
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("SubSkill");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillTask", b =>
                {
                    b.HasOne("Client.Data.Model.User", "Author")
                        .WithMany("SubSkillTasks")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_SubSkillTask_User")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.SubSkill", "SubSkill")
                        .WithMany("SubSkillTasks")
                        .HasForeignKey("SubSkilId")
                        .HasConstraintName("FK_SubSkillTask_SubSkill")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("SubSkill");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillTaskResolving", b =>
                {
                    b.HasOne("Client.Data.Model.User", "AppointingUser")
                        .WithMany("SubSkillTaskAppointments")
                        .HasForeignKey("AppointingUserId")
                        .HasConstraintName("FK_SubSkillTaskResolving_AppointingUser")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.User", "Competitor")
                        .WithMany("SubSkillTaskResolvings")
                        .HasForeignKey("CompetitorId")
                        .HasConstraintName("FK_SubSkillTaskResolving_User")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.SubSkillTask", "SubSkillTask")
                        .WithMany("SubSkillTaskResolvings")
                        .HasForeignKey("SubSkillTaskId")
                        .HasConstraintName("FK_SubSkillTaskResolving_SubSkillTask")
                        .IsRequired();

                    b.Navigation("AppointingUser");

                    b.Navigation("Competitor");

                    b.Navigation("SubSkillTask");
                });

            modelBuilder.Entity("Client.Data.Model.TestProjectSession", b =>
                {
                    b.HasOne("Client.Data.Model.TestProject", "TestProject")
                        .WithMany()
                        .HasForeignKey("TestProjectId")
                        .HasConstraintName("FK_TestProjectSession_TestProject")
                        .IsRequired();

                    b.Navigation("TestProject");
                });

            modelBuilder.Entity("Client.Data.Model.Ticket", b =>
                {
                    b.HasOne("Client.Data.Model.City", "ArrivalCity")
                        .WithMany("TicketArrivalCities")
                        .HasForeignKey("ArrivalCityId")
                        .HasConstraintName("FK_Ticket_City1")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.City", "DepartureCity")
                        .WithMany("TicketDepartureCities")
                        .HasForeignKey("DepartureCityId")
                        .HasConstraintName("FK_Ticket_City")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.Expense", "Expensive")
                        .WithMany("Tickets")
                        .HasForeignKey("ExpensiveId")
                        .HasConstraintName("FK_Ticket_Expense")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.Request", "Request")
                        .WithMany("Tickets")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_Ticket_Request")
                        .IsRequired();

                    b.Navigation("ArrivalCity");

                    b.Navigation("DepartureCity");

                    b.Navigation("Expensive");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Client.Data.Model.Training", b =>
                {
                    b.HasOne("Client.Data.Model.Skill", "SkillCodeNavigation")
                        .WithMany("training")
                        .HasForeignKey("SkillCode")
                        .HasConstraintName("FK_Training_Skill")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.TrainingPlace", "TrainingPlace")
                        .WithMany("training")
                        .HasForeignKey("TrainingPlaceId")
                        .HasConstraintName("FK_Training_TrainingPlace")
                        .IsRequired();

                    b.Navigation("SkillCodeNavigation");

                    b.Navigation("TrainingPlace");
                });

            modelBuilder.Entity("Client.Data.Model.TrainingDay", b =>
                {
                    b.HasOne("Client.Data.Model.Training", "Training")
                        .WithMany("TrainingDays")
                        .HasForeignKey("TrainingId")
                        .HasConstraintName("FK_TrainingDay_Training")
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("Client.Data.Model.TrainingPlace", b =>
                {
                    b.HasOne("Client.Data.Model.City", "City")
                        .WithMany("TrainingPlaces")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_TrainingPlace_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Client.Data.Model.UserDocument", b =>
                {
                    b.HasOne("Client.Data.Model.DocumentType", "DocumentType")
                        .WithMany("UserDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_UserDocument_DocumentType")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.User", "User")
                        .WithMany("UserDocuments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserDocument_User")
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Client.Data.Model.UserRole", b =>
                {
                    b.HasOne("Client.Data.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Client.Data.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Client.Data.Model.UserToken", b =>
                {
                    b.HasOne("Client.Data.Model.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserToken_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Client.Data.Model.UserTrainingDay", b =>
                {
                    b.HasOne("Client.Data.Model.TrainingDay", "TrainingDay")
                        .WithMany("UserTrainingDays")
                        .HasForeignKey("TrainingDayId")
                        .HasConstraintName("FK_UserTrainingDay_TrainingDay")
                        .IsRequired();

                    b.HasOne("Client.Data.Model.User", "User")
                        .WithMany("UserTrainingDays")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTrainingDay_User")
                        .IsRequired();

                    b.Navigation("TrainingDay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Client.Data.Model.WSOS", b =>
                {
                    b.HasOne("Client.Data.Model.Skill", "SkillCodeNavigation")
                        .WithMany("WSOS")
                        .HasForeignKey("SkillCode")
                        .HasConstraintName("FK_WSOS_Skill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCodeNavigation");
                });

            modelBuilder.Entity("Client.Data.Model.Catalog", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("InverseCatalogNavigation");
                });

            modelBuilder.Entity("Client.Data.Model.City", b =>
                {
                    b.Navigation("TicketArrivalCities");

                    b.Navigation("TicketDepartureCities");

                    b.Navigation("TrainingPlaces");
                });

            modelBuilder.Entity("Client.Data.Model.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Client.Data.Model.DocumentType", b =>
                {
                    b.Navigation("UserDocuments");
                });

            modelBuilder.Entity("Client.Data.Model.Expense", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Client.Data.Model.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Client.Data.Model.Request", b =>
                {
                    b.Navigation("RequestHotels");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Client.Data.Model.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Client.Data.Model.Skill", b =>
                {
                    b.Navigation("training");

                    b.Navigation("WSOS");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkill", b =>
                {
                    b.Navigation("InverseParentSubSkill");

                    b.Navigation("SubSkillCriteria");

                    b.Navigation("SubSkillMarks");

                    b.Navigation("SubSkillTasks");
                });

            modelBuilder.Entity("Client.Data.Model.SubSkillTask", b =>
                {
                    b.Navigation("SubSkillTaskResolvings");
                });

            modelBuilder.Entity("Client.Data.Model.Training", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Participants");

                    b.Navigation("Requests");

                    b.Navigation("TrainingDays");
                });

            modelBuilder.Entity("Client.Data.Model.TrainingDay", b =>
                {
                    b.Navigation("UserTrainingDays");
                });

            modelBuilder.Entity("Client.Data.Model.TrainingPlace", b =>
                {
                    b.Navigation("training");
                });

            modelBuilder.Entity("Client.Data.Model.UnitType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Client.Data.Model.User", b =>
                {
                    b.Navigation("Catalogs");

                    b.Navigation("Participants");

                    b.Navigation("Requests");

                    b.Navigation("Skills");

                    b.Navigation("SubSkillMarks");

                    b.Navigation("SubSkillTaskAppointments");

                    b.Navigation("SubSkillTaskResolvings");

                    b.Navigation("SubSkillTasks");

                    b.Navigation("UserDocuments");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");

                    b.Navigation("UserTrainingDays");
                });

            modelBuilder.Entity("Client.Data.Model.UserDocument", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Client.Data.Model.WSOS", b =>
                {
                    b.Navigation("SubSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
