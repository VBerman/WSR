
@page "/login"
@inject Services.IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

@if (isShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@error</p>
    </div>
}
<div class="d-flex align-items-center justify-content-center ">
    <MudPaper Elevation="0" Width="400px">

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin" Class="d-flex flex-column">
            <div class="d-flex flex-column  align-items-center justify-content-center ">
                <img src="/images/logo.png" class="mb-14" width="300px" />

                <MudText Typo="Typo.h3" Class="mb-7">Please sign in</MudText>
            </div>
            <MudTextField Variant="Variant.Outlined" @bind-Value="loginModel.Login" InputType="@InputType.Email" InputMode="@InputMode.email" Label="Email Address"></MudTextField>
            <MudTextField Variant="Variant.Outlined" InputType="@InputType.Password" @bind-Value="loginModel.Password" Label="Password"></MudTextField>
            <MudCheckBox @bind-Checked="@isRemember" Label="Remember me"></MudCheckBox>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true">Sign in</MudButton>

        </EditForm>


    </MudPaper>
</div>

@code {

    private Data.Auth.LoginModel loginModel { get; set; } = new Data.Auth.LoginModel();
    private bool isRemember { get; set; }
    private bool isShowErrors { get; set; }
    private string error = "";


    private async Task HandleLogin()
    {

        isShowErrors = false;
        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            error = result.Error;
            isShowErrors = true;
        }
    }

}
