@using Data.Model
@using Services
@using Data.ViewModel
@using Extensions
@inject TaskResolvingService TaskResolvingService
@inject TaskService TaskService
@inject UserService UserService
@inject ISnackbar Snackbar
<EditForm Model="TaskAssignmentModel" OnValidSubmit="AppointingTasks">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem md="6">
                    <MudSelect Label="Selected users" MultiSelection="true" @bind-SelectedValues="TaskAssignmentModel.SelectedUsers" SelectAll="true" SelectAllText="Select all users" Text="@(TaskAssignmentModel.SelectedUsers.Count + " user/s have been selected")">
                        @foreach (var item in TaskAssignmentModel.AllUsers)
                        {
                            <MudSelectItem Value="item">@item.Login</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem md="6">
                    <MudSelect Label="Selected tasks" MultiSelection="true" @bind-SelectedValues="TaskAssignmentModel.SelectedSubSkillTasks" SelectAll="true" SelectAllText="Select all tasks" Text="@(TaskAssignmentModel.SelectedSubSkillTasks.Count + " task/s have been selected")">
                        @foreach (var item in TaskAssignmentModel.AllSubSkillTasks)
                        {
                            <MudSelectItem Value="item">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <div style="padding-top: 10px">

                <ValidationSummary />
            </div>

        </DialogContent>
        <DialogActions>
            <MudButton  OnClick=@(() => MudDialog.Cancel()) Variant="Variant.Outlined">Cancel</MudButton>

            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Outlined">Appointing tasks</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public SubSkillTask SubSkillTask { get; set; }
    public TaskAssignmentModel TaskAssignmentModel { get; set; } = new TaskAssignmentModel();



    protected override async Task OnInitializedAsync()
    {
        TaskAssignmentModel.AllUsers = await UserService.GetAllUsers();
        TaskAssignmentModel.AllSubSkillTasks = await TaskService.GetAllSubSkillTasks();
    }
    private async Task AppointingTasks()
    {
        var currentUserId = await UserService.GetUserId();
        var result = await TaskResolvingService.AppointingTask(TaskAssignmentModel.SelectedSubSkillTasks, TaskAssignmentModel.SelectedUsers.Select(s => s.Id).ToHashSet(), currentUserId);
        Snackbar.Report(result, "appointing tasks");
    }
}
