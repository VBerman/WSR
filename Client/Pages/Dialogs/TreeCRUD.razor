@using Services
@using Data
@using Data.Model
@inject WSOSService _WSOSService
@inject NavigationManager UriHelper
@inject SubSkillService SubSkillService
@inject ISnackbar Snackbar
<MudPaper>

    <MudContainer>

        <MudToolBar>
            <MudIconButton OnClick="Add" Icon="@Icons.Material.Outlined.Add" />
            @*<MudIconButton Icon="@Icons.Material.Outlined.Edit" />*@
            <MudIconButton Icon="@Icons.Material.Outlined.ArrowCircleUp" Color="Color.Inherit" />
            <MudSpacer />
            <MudIconButton OnClick="Delete" Icon="@Icons.Material.Outlined.Delete" Color="Color.Inherit" />
        </MudToolBar>
        <MudDialog>
            <DialogContent>
                <MudItem>
                    <MudTreeView @ref="TreeView" MaxHeight="70vh" @bind-SelectedValue="SelectedValue" @bind-SelectedValues="SelectedValues" MultiSelection="true" ServerData="SubSkillService.LoadSubSkillsData" Items="TreeItems" CanHover="true">
                        <ItemTemplate>
                            <MudTreeViewItem Style="@context.Style" Value="@context" Text="@context.ViewName" />
                        </ItemTemplate>
                    </MudTreeView>
                    <MudDivider Vertical="true" FlexItem="true" />
                </MudItem>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="MudDialog.Cancel">Cancel</MudButton>
                @*<MudButton>Save changes</MudButton>*@
            </DialogActions>
        </MudDialog>
    </MudContainer>
</MudPaper>
@code {

public MudTreeView<TreeItem> TreeView { get; set; }

[CascadingParameter] MudDialogInstance MudDialog { get; set; }

[Inject] public IDialogService DialogService { get; set; }

private TreeItem? selectedValue;

public TreeItem? SelectedValue
{
    get { return selectedValue; }
    set
    {
        if (value != null)
        {
            selectedValue = value;

            InvokeAsync(async () => { SelectedSubskill = await SubSkillService.LoadSubSkillFromTreeItem(value); });

        }
    }
}

private SubSkill? selectedSubskill;

public SubSkill? SelectedSubskill
{
    get { return selectedSubskill; }
    set
    {
        selectedSubskill = value;
        StateHasChanged();
    }

}



public HashSet<TreeItem> SelectedValues = new HashSet<TreeItem>();


[Parameter] public HashSet<TreeItem> TreeItems { get; set; }

private async Task Delete()
{
    var quantityChild = await SubSkillService.QuantityChildSubSkills(SelectedSubskill) + 1;
    bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"U will delete {quantityChild} subskill/s, are u wanna it?",
        yesText: "Delete!",
        noText: "NO PLZ");
    if (result == true)
    {
        await SubSkillService.DeleteSubSkill(SelectedSubskill);

        Snackbar.Add($"Successfully deleted {quantityChild} subskill/s.", Severity.Success);
        InvokeAsync(RefreshTree);

    }


}

private async Task RefreshTree()
{
    // TODO: it's like a magic
    TreeItems.Clear();
    TreeItems = await _WSOSService.GetWSOSWithoutNestingAsync();
    InvokeAsync(StateHasChanged);

}

private async Task Add()
{

}
}
