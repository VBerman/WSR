@page "/"
@using Data.Model
@using Services
@using Data
@using Data.ViewModel
@inject WSOSService WSOSService
@inject NavigationManager UriHelper
@inject SubSkillService SubSkillService
@inject IDialogService DialogService
@inject UserService UserService
<h1>WSOS skill training</h1>
<MudDivider />

<MudGrid Class="pt-4">

    <MudItem md="3" Class="d-flex min-vh-100">
        <div>
            <AuthorizeView Roles="Trainer">
                <MudButton OnClick="EditTree" FullWidth="true">Edit tree</MudButton>

            </AuthorizeView>
            <MudTreeView MaxHeight="80vh" @bind-SelectedValue="SelectedValue" ServerData="SubSkillService.LoadSubSkillsData" Items="TreeItems" CanHover="true">
                <ItemTemplate>
                    <MudTreeViewItem Value="@context" Text="@context.ViewName" />
                </ItemTemplate>
            </MudTreeView>
        </div>
        <MudDivider Vertical="true" FlexItem="true" />
    </MudItem>

    <MudItem md="9">

        @if (SelectedSubskill != null)
        {
            <div class="d-flex justify-content-between align-items-center">
                <h3>@SelectedSubskill.Name</h3>

                @if (SelectedSubskill.Importance != null)
                {
                    <div class="d-flex flex-column align-items-center">
                        <h6 @*class="font-weight-normal" *@>Importance</h6>

                        <MudRating SelectedValue="@SelectedSubskill.Importance.Value" Size="Size.Medium" ReadOnly="true" />
                    </div>

                }
            </div>
            <div class="pl-1">
                @if (SelectedSubskill.Theory != null)
                {

                    <div>
                        <h4>Theory</h4>
                        <MudPaper Class="pt-1 pl-2 pr-2">

                            <MudMarkdown Value="@SelectedSubskill.Theory" />
                        </MudPaper>
                    </div>
                }


                <TasksCRUDTable SubSkill="@SelectedSubskill" />
                <CriteriaCRUDTable SubSkill="@SelectedSubskill" />

            </div>


        }

    </MudItem>
</MudGrid>






@code {

    private TreeItem selectedValue;

    public TreeItem SelectedValue
    {
        get { return selectedValue; }
        set
        {
            if (value != null)
            {
                selectedValue = value;

                InvokeAsync(async () => { SelectedSubskill = await SubSkillService.LoadSubSkillFromTreeItem(value); });

            }
        }
    }

    private SubSkill selectedSubskill;

    public SubSkill SelectedSubskill
    {
        get { return selectedSubskill; }
        set
        {
            selectedSubskill = value;
            _ = InvokeAsync(StateHasChanged);
        }
    }


    public HashSet<TreeItem> TreeItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TreeItems = await WSOSService.GetWSOSWithoutNestingAsync();
    }



    private async Task EditTree()
    {
        var parameters = new DialogParameters();
        parameters.Add("TreeItems", TreeItems);
        var options = new DialogOptions() { };
        var dialog = DialogService.Show<Dialogs.TreeCRUD>("Edit tree", parameters, options);
        var result = await dialog.Result;
        _ = InvokeAsync(StateHasChanged);

    }

    private async Task RefreshTree()
    {

        TreeItems.Clear();
        TreeItems = await WSOSService.GetWSOSWithoutNestingAsync();
        _ = InvokeAsync(StateHasChanged);

    }


}
