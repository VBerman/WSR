
@page "/resolvingtasks/{taskResolvingId:int}"
@using Services
@using Data.Model
@inject TaskService TaskService
@inject TaskResolvingService TaskResolvingService




@if (TaskResolving != null)
{

    <h1 class="pb-5"> @TaskResolving.SubSkillTask.Name Task resolving</h1>
    <MudGrid>

        <MudItem md="4">
            <MudGrid>
                <MudItem md="12">
                    <MudField Label="Competitor" Variant="Variant.Text">
                        <MudLink Underline="Underline.None" Href="#">@TaskResolving.Competitor.Login</MudLink>
                    </MudField>

                </MudItem>
                <MudItem md="12">
                    <MudField Label="SubSkill task" Variant="Variant.Text">
                        <MudLink Underline="Underline.None" Href="@($"tasks/" + TaskResolving.SubSkillTaskId)">@TaskResolving.SubSkillTask.Name</MudLink>
                    </MudField>
                </MudItem>

                <MudItem md="12">
                    <MudField Label="Score / Max score" Variant="Variant.Text">
                        <MudText>@(TaskResolving.Score.ToString() + " / " + TaskResolving.SubSkillTask.MaxScore.ToString()) </MudText>
                    </MudField>
                </MudItem>

                <MudItem md="12">
                    @if (TaskResolving.Status != Data.Enums.ResolvingStatus.Solved)
                    {
                        <MudTextField Label="Solution path" @bind-Value="@TaskResolving.SolutionPath" Variant="Variant.Text" />
                    }
                    else
                    {
                        <MudField Label="Solution path" Variant="Variant.Text">
                            <MudLink Underline="Underline.None" Href="@TaskResolving.SolutionPath">@TaskResolving.SolutionPath</MudLink>
                        </MudField>
                    }

                </MudItem>
                @*add none vision for other competitors*@
            </MudGrid>
        </MudItem>
        <MudItem md="4">
            <MudGrid>
                <MudItem md="12">
                    <MudField Label="Start time" Variant="Variant.Text">
                        <MudText>@TaskResolving.StartSolvingTime</MudText>
                    </MudField>

                </MudItem>
                <MudItem md="12">
                    <MudField Label="End time" Variant="Variant.Text">
                        <MudText>@(TaskResolving.Status == Data.Enums.ResolvingStatus.Solved ?  TaskResolving.EndSolvingTime.Value : "Don't resolved")</MudText>
                    </MudField>

                </MudItem>
                <MudItem md="12">
                    <MudField Label="Resolving duration" Variant="Variant.Text">
                        <MudText>@(TaskResolving.Status == Data.Enums.ResolvingStatus.Solved ? TaskResolving.ResolvingDuration : "Don't resolved")</MudText>
                    </MudField>

                </MudItem>

                @if ((int)TaskResolving.Status > 1)
                {
                    <MudItem md="12">
                        <MudCheckBox @bind-Checked="@TaskResolving.IsFullResolving" Disabled="true" Label="Full resolving" Dense="true" Class="ml-n1" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>

                    </MudItem>
                }

                <ControlTaskResolving TaskResolving="@TaskResolving" Orientation="end" />
            </MudGrid>
        </MudItem>


        @if (TaskResolving.Comment != null)
        {
            <MudItem md="4">
                <div class="pt-3 pl-3">
                    <MudText>Comment</MudText>
                    <MudPaper Style="@($"background:{ Colors.BlueGrey.Lighten5 }")" Class="mt-4 pa-3">

                        <MudMarkdown Value="@TaskResolving.Comment" />
                    </MudPaper>

                </div>
            </MudItem>
        }

    </MudGrid>
}
else
{
    <p>This resolving doesn't exist</p>
}


@code {
    [Parameter] public int TaskResolvingId { get; set; }

    public SubSkillTaskResolving? TaskResolving { get; set; }


    protected override async Task OnInitializedAsync()
    {

        TaskResolving = await Task.Run(() => TaskResolvingService.GetResolvingTask(TaskResolvingId));


    }


}


