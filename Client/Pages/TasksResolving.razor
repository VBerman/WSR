
@page "/resolvingtasks/{resolvingTaskId:int}"
@using Services
@using Data.Model
@inject TaskService TaskService




@if (ResolvingTask != null)
{

    <h1 class="pb-5"> @ResolvingTask.SubSkillTask.Name Task resolving</h1>
    <MudGrid>

        <MudItem md="4">
            <MudGrid>
                <MudItem md="12">
                    <MudField Label="Competitor" Variant="Variant.Text">
                        <MudLink Underline="Underline.None" Href="#">@ResolvingTask.Competitor.Login</MudLink>
                    </MudField>

                </MudItem>
                <MudItem md="12">
                    <MudField Label="SubSkill task" Variant="Variant.Text">
                        <MudLink Underline="Underline.None" Href="@($"tasks/" + ResolvingTask.SubSkillTaskId)">@ResolvingTask.SubSkillTask.Name</MudLink>
                    </MudField>
                </MudItem>

                <MudItem md="12">
                    <MudField Label="Score / Max score" Variant="Variant.Text">
                        <MudText>@(ResolvingTask.Score.ToString() + " / " + ResolvingTask.SubSkillTask.MaxScore.ToString()) </MudText>
                    </MudField>
                </MudItem>

                <MudItem md="12">
                    @if (ResolvingTask.EndTime == null)
                    {
                        <MudTextField Label="Solution path" @bind-Value="@ResolvingTask.SolutionPath" Variant="Variant.Text" />
                    }
                    else
                    {
                        <MudField Label="Solution path" Variant="Variant.Text">
                            <MudLink Underline="Underline.None" Href="@ResolvingTask.SolutionPath">@ResolvingTask.SolutionPath</MudLink>
                        </MudField>
                    }

                </MudItem>
                @*add none vision for other competitors*@
            </MudGrid>
        </MudItem>
        <MudItem md="4">
            <MudGrid>
                <MudItem md="12">
                    <MudField Label="Start time" Variant="Variant.Text">
                        <MudText>@ResolvingTask.StartTime</MudText>
                    </MudField>

                </MudItem>
                <MudItem md="12">
                    <MudField Label="End time" Variant="Variant.Text">
                        <MudText>@(ResolvingTask.EndTime.HasValue ? ResolvingTask.EndTime.Value : "Don't resolved")</MudText>
                    </MudField>

                </MudItem>
                <MudItem md="12">
                    <MudField Label="Resolving duration" Variant="Variant.Text">
                        <MudText>@(ResolvingTask.ResolvingDuration.HasValue ? ResolvingTask.ResolvingDuration : "Don't resolved")</MudText>
                    </MudField>

                </MudItem>

                <MudItem md="12">
                    <MudCheckBox @bind-Checked="@ResolvingTask.IsFullResolving" Disabled="true" Label="Full resolving" Dense="true" Class="ml-n1" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>

                </MudItem>


                @if (ResolvingTask.EndTime == null)
                {
                    <MudItem md="12" Class="d-flex justify-content-end">
                        <MudButton OnClick="EndResolving" Color="Color.Primary" Style="vertical-align: bottom" Variant="Variant.Filled">End resolving</MudButton>
                    </MudItem>

                }
            </MudGrid>
        </MudItem>
        <MudDivider Vertical="true" />

        @if (ResolvingTask.Comment != null)
        {
            <MudItem md="4">
                <div class="pt-3 pl-3">
                    <MudField Label="Comment" Variant="Variant.Text">
                        <MudPaper Style="@($"background:{ Colors.BlueGrey.Lighten5 }")" Class="mt-4 pa-3">

                            <MudMarkdown Value="@ResolvingTask.Comment" />
                        </MudPaper>
                    </MudField>
                </div>
            </MudItem>
        }

    </MudGrid>
}
else
{
    <p>This resolving doesn't exist</p>
}


@code {
    [Parameter] public int ResolvingTaskId { get; set; }

    public SubSkillTaskResolving? ResolvingTask { get; set; }


    protected override async Task OnInitializedAsync()
    {

        ResolvingTask = await Task.Run(() => TaskService.GetResolvingTask(ResolvingTaskId));


    }

    private async Task EndResolving()
    {
        ResolvingTask = await Task.Run(() => TaskService.EndTask(ResolvingTask));


    }
}


