
@page "/login"
@inject Services.IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider ApiAuthenticationStateProvider
@inject ISnackbar Snackbar
@attribute [AllowAnonymous]

<div class="d-flex align-items-center justify-content-center ">
    <MudPaper Elevation="0" Width="400px">
        <EditForm Model="@LoginModel" OnValidSubmit="HandleLogin" Class="d-flex flex-column">
            <DataAnnotationsValidator />

            <div class="d-flex flex-column  align-items-center justify-content-center ">
                <img src="/images/logo.png" class="mb-14" width="300px" />

                <MudText Typo="Typo.h3" Class="mb-7">Please sign in</MudText>
            </div>

            <MudTextField Variant="Variant.Outlined" @bind-Value="LoginModel.Login" For="@(() => LoginModel.Login)"  Label="Login"></MudTextField>
            <MudTextField Variant="Variant.Outlined" @bind-Value="LoginModel.Password" For="@(() => LoginModel.Password)" InputType="InputType.Password" Label="Password"></MudTextField>
            <MudCheckBox @bind-Checked="@IsRemember" Label="Remember me"></MudCheckBox>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Variant="Variant.Filled" FullWidth="true">Sign in</MudButton>

        </EditForm>


    </MudPaper>
</div>

@code {

    public Data.Auth.LoginModel LoginModel { get; set; } = new Data.Auth.LoginModel();
    public bool IsRemember { get; set; }
    public bool IsShowErrors { get; set; }



    private async Task HandleLogin(EditContext context)
    {

        IsShowErrors = false;
        var result = await AuthService.Login(LoginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add($"Error auth", Severity.Error);
        }

    }

}
